apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'project-report'
apply from: "http://dl.bintray.com/content/shemnon/javafx-gradle/0.3.0/javafx.plugin"


group = 'edu.mype'
version = '1.0-SNAPSHOT'

description = "Prismatic Android client"

sourceCompatibility = 1.7
targetCompatibility = 1.7




repositories {
    mavenCentral()
}

dependencies {
    compile 'org.glassfish.jersey.core:jersey-client:2.4'
    compile 'org.glassfish.jersey.connectors:jersey-apache-connector:2.4'
    compile 'com.sun.jersey:jersey-json:1.8'
    compile 'org.glassfish.jersey.media:jersey-media-json-processing:2.4'
    compile 'org.codehaus.jettison:jettison:1.3.2'
    compile 'commons-lang:commons-lang:2.6'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.0.13'

    compile 'com.google.inject:guice:4.0-beta'


    testCompile 'junit:junit:4.11'
    testCompile 'org.easytesting:fest-assert-core:2.0M10'
    testCompile 'org.mockito:mockito-all:1.9.5'
}


idea {

    //if you want parts of paths in resulting files (*.iml, etc.) to be replaced by variables (Files)
//    pathVariables GRADLE_HOME: file('~/cool-software/gradle')

    module {
        //if for some reason you want to add an extra sourceDirs
        sourceDirs += file('src/main/java')

        //and some extra test source dirs
        testSourceDirs += file('src/test/java')

        //and some extra dirs that should be excluded by IDEA
        excludeDirs += file('build')// + file('target')

        //if you don't like the name Gradle has chosen
        name = 'PrismAndr'

        //if you prefer different output folders
        inheritOutputDirs = false
        outputDir = file('build/classes')
        testOutputDir = file('build/test-classes')

        //if you prefer different SDK than that inherited from IDEA project
        jdkName = '1.7'

        //if you need to put 'provided' dependencies on the classpath
        //scopes.PROVIDED.plus += configurations.provided

        //if 'content root' (as IDEA calls it) of the module is different
        // contentRoot = file('my-module-content-root')

        //if you love browsing Javadoc
        downloadJavadoc = true

        //and hate reading sources :)
        downloadSources = true
    }
}

javafx {
    appID 'PismFX'
    appName 'Prismatic'
    mainClass 'edu.mype.prismandr.fx.PrismaticFX'

    jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
    systemProperties = ['prism.disableRegionCaching': 'true']
    arguments = ['-l', '--fast']

    embedLauncher = false

    // deploy/info attributes
    category = 'Demos'
    copyright = 'Copyright (c) 2013 Mype'
    description = 'This is a sample configuration, it is not real.'
    licenseType = 'Apache 2.0'
    vendor = 'Mype'
    installSystemWide = true
    menu = true
    shortcut = true
/*
 // app icons
 icons {
     shortcut = ['shortcut-16.png', 'shortcut-32.png', 'shortcut-128.png', 'shortcut-256.png', 'shortcut-16@2x.png', 'shortcut-32@2x.png', 'shortcut-128@2x.png']
     volume = 'javafx-icon.png'
     setup = 'javafx-icon.png'
 }

 // applet and webstart stuff
 debugKey {
     alias = 'debugKey'
     //keyPass = 'password' // provide via command line
     keyStore = file('~/keys/debug.jks')
     //storePass = 'password'  // provide via command line
 }
 releaseKey {
     alias = 'production'
     //keyPass = 'password' // provide via command line
     keyStore = file('/Volumes/ProdThumbDrive/production.jks')
     //storePass = 'password'  // provide via command line
 }
 signingMode 'release'

 width = 800
 height = 600
 embedJNLP = false
    codebase = 'http://example.com/bogus/JNLP/Codebase'

 // arbitrary jnlp icons
    icon {
        href = 'src/main/resources/javafx-icon.png'
        kind = 'splash'
        width = 128
        height = 128
    }
    icon {
        href = 'shortcut-32@2x.png'
        kind = 'selected'
        width = 16
        height = 16
        scale = 1
    }

 */
}
<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices from sifferent projects

  Finally, it is worth reading the documentation.

-->
<module name="Checker">
    <!-- Headers-->
    <!--Checks for Headers-->
    <!--See http://checkstyle.sf.net/config_header.html-->
    <module name="Header">
        <property
                name="header"
                value="// Copyright (c) 2013 Mype. All rights reserved.\n// \n// \n"/>
        <property name="fileExtensions" value="java"/>
        <property name="ignoreLines" value="1, 2"/>
    </module>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <module name="FileLength"/>

    <!-- Following interprets the header file as regular expressions. -->
    <!-- <module name="RegexpHeader"/>                                -->

    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="RegexpSingleline">
        <!-- \s matches whitespace character, $ matches end of line. -->
        <property name="format" value="\s+$"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>






    <module name="TreeWalker">
        <property name="cacheFile" value="${basedir}/.checkstyle/checkstyle-cache"/>

        <!--Annotations-->

        <!--This check controls the style with the usage of annotations.-->
        <module name="AnnotationUseStyle">
            <!--Defines the policy for trailing comma in arrays.-->
            <property name="trailingArrayComma" value="never"/>
            <!--represents the policy for the styles for defining elements in an annotation. It is similar to the compact style but single value arrays are flagged. With annotations a single value array does not need to be placed in an array initializer.-->
            <property name="elementStyle" value="compact_no_array"/>
            <!--represents the policy for the styles for the ending parenthesis-->
            <property name="closingParens" value="never"/>
        </module>

        <!--Verifies that both the java.lang.Deprecated annotation is present and the @deprecated Javadoc tag is present when either is present.-->
        <module name="MissingDeprecated"/>

        <!--Verifies that the java.lang.Override annotation is present when the {@inheritDoc} javadoc tag is present.-->
        <module name="MissingOverride" />





        <!--Block Checks-->

        <!--Checks for empty blocks.-->
        <module name="EmptyBlock">
            <property name="option" value="text"/>
        </module>
        <!--Checks for the placement of left curly braces ('{') for code blocks.-->
        <module name="LeftCurly">
            <!--always on new line-->
            <property name="option" value="eol"/>
            <property name="maxLineLength" value="120"/>
        </module>
        <module name="RightCurly">
            <!--always on new line-->
            <property name="option" value="alone"/>
        </module>
        <module name="AvoidNestedBlocks"/>




        <!--Class Design-->

        <!--Checks visibility of class members. Only static final members may be public;-->
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
            <property name="packageAllowed" value="true"/>
        </module>
        <!--an interface should describe a type. It is therefore inappropriate to define an interface that does not contain any methods but only constants.-->
        <module name="InterfaceIsType"/>
        <!--Checks that a class which has only private constructors is declared as final.-->
        <module name="FinalClass"/>
        <!--Make sure that utility classes (classes that contain only static methods or fields in their API) do not have a public constructor.-->
        <module name="HideUtilityClassConstructor"/>




        <!-- Checks for common coding problems   -->
        <module name="EmptyStatement"/>
        <module name="EqualsAvoidNull"/>
        <module name="EqualsHashCode"/>
        <module name="FinalLocalVariable">
            <property name="tokens" value="PARAMETER_DEF"/>
        </module>
        <module name="HiddenField">
            <property name="severity" value="warning"/>
            <property name="ignoreSetter" value="true"/>
            <property name="ignoreConstructorParameter" value="true"/>
        </module>
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
        <module name="MagicNumber">
            <property name="ignoreHashCodeMethod" value="true"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="DefaultComesLast"/>
        <module name="RedundantThrows"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="NestedForDepth"/>
        <module name="NestedIfDepth"/>
        <module name="NoFinalizer"/>
        <module name="PackageDeclaration"/>
        <!--According to Code Conventions for the Java Programming Language , the parts of a class or interface declaration should appear in the following order:
        Class (static) variables. First the public class variables, then the protected, then package level (no access modifier), and then the private.
        Instance variables. First the public class variables, then the protected, then package level (no access modifier), and then the private.
        Constructors
        Methods-->
        <module name="DeclarationOrder"/>
        <module name="ParameterAssignment"/>
        <module name="MultipleStringLiterals"/>
        <module name="OneStatementPerLine"/>




        <!-- Checks for imports                              -->

        <module name="IllegalImport"/>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>





        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
            <property name="allowMissingPropertyJavadoc" value="true"/>
            <property name="excludeScope" value="private"/>
        </module>
        <module name="JavadocType"/>
        <module name="JavadocStyle"/>

        <!-- Miscellaneous other checks.                   -->
        <module name="ArrayTypeStyle"/>
        <module name="FinalParameters"/>
        <module name="Indentation"/>
        <module name="UpperEll"/>


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>





        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength">
            <property name="max" value="120"/>
        </module>
        <module name="MethodLength">
            <property name="max" value="60"/>
        </module>
        <!--Checks for long anonymous inner classes.-->
        <module name="AnonInnerLength">
            <!--maximum allowable number of lines. Set according to one screen.-->
            <property name="max" value="60"/>
        </module>
        <module name="ParameterNumber">
            <property name="max" value="5"/>
        </module>




        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="GenericWhitespace"/>
        <module name="EmptyForIteratorPad"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <module name="OperatorWrap">
            <property name="tokens"
                      value="ASSIGN,DIV_ASSIGN,PLUS_ASSIGN,MINUS_ASSIGN,STAR_ASSIGN,MOD_ASSIGN,SR_ASSIGN,BSR_ASSIGN,SL_ASSIGN,BXOR_ASSIGN,BOR_ASSIGN,BAND_ASSIGN"/>
            <property name="option" value="eol"/>
        </module>
    </module>

</module>